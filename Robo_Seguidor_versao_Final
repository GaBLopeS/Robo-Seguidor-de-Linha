
/*                       PROGRAMAÇÃO DE UM ROBÔ SEGUIDOR DE LINHA COM ARDUINO

     Código desenvolvido pelos alunos de Engenharia Elétrica Do 6º Semestre para  a Disciplina - Projeto Integrado II

                "ROBÔ SEGUIDOR DE LINHAS PARA COMPETIÇÃO DE ROBÓTICA DA SEMANA DE ENGENHARIA 2015.2"

    OBS: A biblioteca "Ultrasonic.h" por ser encontrada no site "CYTRON":
    http://tutorial.cytron.com.my/2012/10/11/testing-ultrasonic-ranging-module-sn-hc-sr04/

*/

// _________________________________________________________________________________________________________________________//


#include "Ultrasonic.h"                   // Inclui a biblioteca de controle do sensor HC-SR04
Ultrasonic ultrasonic(10, 9);             // Define a pinagem utilizada para trafego de dados com o sensor
int botao = A0;                           // Define o pino do Arduino que será tratado como botao
int LedOn = 12;                           // Define o pino do Arduino que será tratado como LED de estado ON
int LedOff = 13;                          // Define o pino do Arduino que será tratado como LED de estado OFF
int MotorEsquerdo = 6;                    // Define o pino do Arduino que controla a velocidade o motor esquerdo
int MotorDireito = 5;                     // Define o pino do Arduino que controla a velocidade o motor direito
int SentidoMotorEsquerdo = 7;             // Define o pino do Arduino que controla o sentido de rotação o motor esquerdo
int SentidoMotorDireito = 8;              // Define o pino do Arduino que controla o sentido de rotação o motor direito
int Sensor1esquerdo = A1;                 // Define o pino do Arduino que controla a leitura do sensor 1 esquerdo
int Sensor1direito = A2;                  // Define o pino do Arduino que controla a leitura do sensor 1 direito
int Sensor2esquerdo = A3;                 // Define o pino do Arduino que controla a leitura do sensor 1 esquerdo
int Sensor2direito = A4;                  // Define o pino do Arduino que controla a leitura do sensor 1 direito
int ValorDaEntradaA0 = 0;                 // Define a variável "ValorDaEntradaA0" com o valor inicial 0
int ContagemDoBotao = 0;                  // Define a variável "ContagemDoBotao" com o valor inicial 0
int Linha = 840;                          // Define a variável "Linha" com o valor fixo de 840
int Parada = 0;                           // Define a variável "Parada" com o valor inicial 0

void setup()                                    // Rotina de configuração inicial da programação
{ pinMode (botao, INPUT);                       // Define que o pino botao será usado como entrada
  pinMode (LedOn, OUTPUT);                      // Define que o pino LedOn será usado como saída
  pinMode (LedOff, OUTPUT);                     // Define que o pino LedOff será usado como saída
  pinMode(MotorEsquerdo, OUTPUT);               // Define que o pino MotorEsquerdo será usado como saída
  pinMode(MotorDireito, OUTPUT);                // Define que o pino MotorDireito será usado como saída
  pinMode(SentidoMotorEsquerdo, OUTPUT);        // Define que o pino SentidoMotorEsquerdo será usado como saída
  pinMode(SentidoMotorDireito, OUTPUT);         // Define que o pino SentidoMotorDireito será usado como saída
  pinMode(Sensor1esquerdo, INPUT);              // Define que o pino Sensor1esquerdo será usado como entrada
  pinMode(Sensor1direito, INPUT);               // Define que o pino Sensor1direito será usado como entrada
  pinMode(Sensor2esquerdo, INPUT);              // Define que o pino Sensor1esquerdo será usado como entrada
  pinMode(Sensor2direito, INPUT);               // Define que o pino Sensor1direito será usado como entrada
}

void loop()                                                   // Scrip que será executação periódicamente infinitas vezes
{ ValorDaEntradaA0 = analogRead(botao);                       // Define "ValorDaEntradaA0" como sendo o mesmo valor mensurado no pino "botao"

  if (ValorDaEntradaA0 > 500 && ValorDaEntradaA0 < 550)       // Função que compara o valor da variável com os valores pré estabelecidos (executa o comando em caso de "correto")
  {
    opcao ('1');                                              // Comando que executa uma função secundária
    delay (1000);                                             // Período que o programa aguardará até a proxima ação
  }

  if (ContagemDoBotao == 1)                                   // Função que compara o valor das variáveis com os valores pré estabelecidos (executa o comando em caso de "correto")
  {                                                           // OBS: A variavel ultrasonic.Ranging(CM) está pré estabelecida pela biblioteca do sensor HB-SR04
    opcao ('2');                                              // Comando que executa uma função secundária
    delay(5);                                                 // Período que o programa aguardará até a proxima ação
  }

  else {}                                                     // Comando a ser executado caso nenhuma outra função seja verdadeira
}

void opcao(char estado)                                       // Script secundário, será executado caso chamado em condições específicas
{
  switch (estado)                                             // Função compara o valor de uma única variável com diferentes valores especificados em cada "case"
  {
    case '1':                                                 // Primeira opção da função "switch"
     
      ContagemDoBotao++;                                      // Soma o valor de 1 a variável "ContagemDoBotao"
      if (ContagemDoBotao == 1)                               // Função que compara o valor da variável com o valor pré estabelecido (executa o comando em caso de "correto")
      { digitalWrite(LedOn, HIGH);                            // Define como ligado o LED de estado ON
        delay(1500);                                          // Período que o programa aguardará até a proxima ação
        digitalWrite(LedOn, LOW);                             // Define como desligado o LED de estado ON
        delay(300);                                           // Período que o programa aguardará até a proxima ação
      }

      if (ContagemDoBotao == 2)                               // Função que compara o valor da variável com o valor pré estabelecido (executa o comando em caso de "correto")
      { digitalWrite(SentidoMotorDireito, LOW);               // Define qual será o sentido de rotação do motor direito
        digitalWrite(SentidoMotorEsquerdo, HIGH);             // Define qual será o sentido de rotação do motor esquerdo
        analogWrite(MotorDireito, 0);                         // Define qual será a velocidade do motor direito
        analogWrite(MotorEsquerdo, 0);                        // Define qual será a velocidade do motor esquerdo
        digitalWrite(LedOff, HIGH);                           // Define como ligado o LED de estado OFF
        delay(1500);                                          // Período que o programa aguardará até a proxima ação
        digitalWrite(LedOff, LOW);                            // Define como desligado o LED de estado OFF
        delay(300);                                           // Período que o programa aguardará até a proxima ação
        ContagemDoBotao = 0;                                  // Define o valor da variável como 0
      }
      break;                                                  // Encerra a função "switch" voltando ao loop comum


    case '2':                                                 // Segunda opção da função "switch"

      if (ultrasonic.Ranging(CM) < 10)                        // Define a condição de menos de 10cm para a soma da variável
        Parada = Parada + 1 ;                                 // Define "Parada" como sendo o valor anterior acrescido de 1

      if (Parada > 80)                                        // Define a condição de mais de 80 para a limitação da variável
        Parada = 80;                                          // Define o limite da variável

      if (Parada != 1 )                                       // Define a condição para o carrinho percorrer a pista
      { int ValorE1 = analogRead(Sensor1esquerdo);            // Define a variável ValorE1 como a leitura de "Sensor1esquerdo"
        int ValorD1 = analogRead(Sensor1direito);             // Define a variável ValorD1 como a leitura de "Sensor1direito"
        int ValorE2 = analogRead(Sensor2esquerdo);            // Define a variável ValorE2 como a leitura de "Sensor2esquerdo"
        int ValorD2 = analogRead(Sensor2direito);             // Define a variável ValorD2 como a leitura de "Sensor2direito"
        delay(5);                                             // Período que o programa aguardará até a proxima ação

        if (ValorD2 > Linha)                                  // Condição para o carrinho fazer curva acentuada a direita
        { digitalWrite(SentidoMotorDireito, LOW);             // Define qual será o sentido de rotação do motor direito
          digitalWrite(SentidoMotorEsquerdo, HIGH);           // Define qual será o sentido de rotação do motor esquerdo
          analogWrite(MotorDireito, 0);                       // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 59 );                    // Define qual será a velocidade do motor esquerdo
        }

        if (ValorE2 > Linha )                                 // Condição para o carrinho fazer curva acentuada a esquerda
        { digitalWrite(SentidoMotorDireito, LOW);             // Define qual será o sentido de rotação do motor direito
          digitalWrite(SentidoMotorEsquerdo, HIGH);           // Define qual será o sentido de rotação do motor esquerdo
          analogWrite(MotorDireito, 59);                      // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 0);                      // Define qual será a velocidade do motor esquerdo
        }

        if (ValorE1 < Linha && ValorD1 < Linha && ValorE2 < Linha && ValorD2 < Linha ) // Condição para ir para frente
        { digitalWrite(SentidoMotorDireito, LOW);             // Define qual será o sentido de rotação do motor direito
          digitalWrite(SentidoMotorEsquerdo, HIGH);           // Define qual será o sentido de rotação do motor esquerdo
          analogWrite(MotorDireito, 55);                      // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 55 );                    // Define qual será a velocidade do motor esquerdo
        }

        if (ValorE1 < Linha && ValorD1 > Linha )              // Condição para o carrinho fazer curva leve à direita
        { analogWrite(MotorDireito, 0);                       // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 0);                      // Define qual será a velocidade do motor esquerdo
          digitalWrite(SentidoMotorDireito, LOW);             // Define qual será o sentido de rotação do motor direito
          digitalWrite(SentidoMotorEsquerdo, HIGH);           // Define qual será o sentido de rotação do motor esquerdo
          analogWrite(MotorDireito, 0);                       // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 55);                     // Define qual será a velocidade do motor esquerdo
        }
       
        if (ValorE1 > Linha && ValorD1 < Linha )              // Condição para o carrinho fazer curva leve à esquerda
        { analogWrite(MotorDireito, 0);                       // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 0);                      // Define qual será a velocidade do motor esquerdo
          digitalWrite(SentidoMotorDireito, LOW);             // Define qual será o sentido de rotação do motor direito
          digitalWrite(SentidoMotorEsquerdo, HIGH);           // Define qual será o sentido de rotação do motor esquerdo
          analogWrite(MotorDireito, 55);                      // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 0);                      // Define qual será a velocidade do motor esquerdo
        }
        
        if (ValorE1 > Linha && ValorD1 > Linha && ValorE2 > Linha && ValorD2 > Linha ) // Condição para imobilizar o carrinho
        { digitalWrite(SentidoMotorDireito, LOW);             // Define qual será o sentido de rotação do motor direito
          digitalWrite(SentidoMotorEsquerdo, HIGH);           // Define qual será o sentido de rotação do motor esquerdo
          analogWrite(MotorDireito, 0);                       // Define qual será a velocidade do motor direito
          analogWrite(MotorEsquerdo, 0);                      // Define qual será a velocidade do motor esquerdo
        }
      }
      
      if (Parada == 1)                                        // Condição que indicará o momento de parada do carrinho
      { digitalWrite(SentidoMotorDireito, LOW);               // Define qual será o sentido de rotação do motor direito
        digitalWrite(SentidoMotorEsquerdo, HIGH);             // Define qual será o sentido de rotação do motor esquerdo
        analogWrite(MotorDireito, 0);                         // Define qual será a velocidade do motor direito
        analogWrite(MotorEsquerdo, 0);                        // Define qual será a velocidade do motor esquerdo
        delay(12000);                                         // Período que o carrinho aguardará parado até a proxima ação
        digitalWrite(SentidoMotorDireito, LOW);               // Define qual será o sentido de rotação do motor direito
        digitalWrite(SentidoMotorEsquerdo, HIGH);             // Define qual será o sentido de rotação do motor esquerdo
        analogWrite(MotorDireito, 65);                        // Define qual será a velocidade do motor direito
        analogWrite(MotorEsquerdo, 65);                       // Define qual será a velocidade do motor esquerdo
        delay(70);                                            // Período que o programa aguardará até a proxima ação
      }

      if (ultrasonic.Ranging(CM) > 15 && Parada == 80)        // Condição para zerar o valor da variável parada
        Parada = 0;                                           // Define a variável "Parada" com o valor 0

      else {}                                                 // Comando a ser executado caso nenhuma outra função seja verdadeira
  }
}
